name: Deploy PR Preview
on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:  # Allow manual triggering
    inputs:
      pr_number:
        description: 'PR number to deploy'
        required: false
        type: string

jobs:
  deploy-preview:
    if: github.event.action != 'closed' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'Frontend/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./Frontend
        run: npm ci
        
      - name: Build project
        working-directory: ./Frontend
        run: npm run build
        
              - name: Create or Update PR Preview Service
        id: deploy
        run: |
          # Handle manual dispatch vs PR event
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ github.event.inputs.pr_number }}" ]; then
              PR_NUMBER="${{ github.event.inputs.pr_number }}"
            else
              echo "Error: PR number required for manual dispatch"
              exit 1
            fi
            # Get PR info from API
            PR_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")
            BRANCH_NAME=$(echo "$PR_INFO" | jq -r '.head.ref')
          else
            PR_NUMBER="${{ github.event.number }}"
            BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          fi
          
          SERVICE_NAME="wallgodds-pr-$PR_NUMBER"
          REPO_URL="https://github.com/${{ github.repository }}"
          
          echo "Creating/updating preview service: $SERVICE_NAME"
          echo "Repository: $REPO_URL"
          echo "Branch: $BRANCH_NAME"
          echo "PR Number: $PR_NUMBER"
          
          # Check if service already exists
          echo "Checking for existing service..."
          SERVICES_RESPONSE=$(curl -s -X GET "https://api.render.com/v1/services" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Accept: application/json")
          
          EXISTING_SERVICE=$(echo "$SERVICES_RESPONSE" | jq -r --arg name "$SERVICE_NAME" '.[] | select(.name == $name) | .id // empty')
          
          if [ -z "$EXISTING_SERVICE" ]; then
            echo "Creating new Render service..."
            
            # Create JSON payload properly
            JSON_PAYLOAD=$(jq -n \
              --arg type "static_site" \
              --arg name "$SERVICE_NAME" \
              --arg repo "$REPO_URL" \
              --arg branch "$BRANCH_NAME" \
              --arg rootDir "./Frontend" \
              --arg buildCommand "npm ci && npm run build" \
              --arg publishPath "./dist" \
              '{
                type: $type,
                name: $name,
                repo: $repo,
                branch: $branch,
                rootDir: $rootDir,
                buildCommand: $buildCommand,
                publishPath: $publishPath,
                pullRequestPreviewsEnabled: false,
                autoDeploy: true
              }')
            
            echo "Sending payload:"
            echo "$JSON_PAYLOAD"
            
            CREATE_RESPONSE=$(curl -s -X POST "https://api.render.com/v1/services" \
              -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d "$JSON_PAYLOAD")
            
            echo "Response from Render:"
            echo "$CREATE_RESPONSE"
            
            SERVICE_ID=$(echo "$CREATE_RESPONSE" | jq -r '.id // empty')
            
            if [ -z "$SERVICE_ID" ] || [ "$SERVICE_ID" = "null" ]; then
              echo "Failed to create service. Full response:"
              echo "$CREATE_RESPONSE"
              exit 1
            fi
            
            echo "Created service with ID: $SERVICE_ID"
            
            # Wait for service to be ready and get URL
            echo "Waiting for service to initialize..."
            sleep 30
            
          else
            echo "Found existing service: $EXISTING_SERVICE"
            SERVICE_ID="$EXISTING_SERVICE"
            
            # Trigger a new deployment
            echo "Triggering new deployment..."
            DEPLOY_RESPONSE=$(curl -s -X POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
              -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d '{"clearCache": false}')
              
            echo "Deploy response: $DEPLOY_RESPONSE"
          fi
          
          # Get service details and URL
          echo "Getting service details..."
          SERVICE_DETAILS=$(curl -s -X GET "https://api.render.com/v1/services/$SERVICE_ID" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}")
          
          echo "Service details response:"
          echo "$SERVICE_DETAILS"
          
          SERVICE_URL=$(echo "$SERVICE_DETAILS" | jq -r '.serviceDetails.url // empty')
          
          if [ -z "$SERVICE_URL" ] || [ "$SERVICE_URL" = "null" ]; then
            # Fallback: construct URL from service name
            SERVICE_URL="https://$SERVICE_NAME.onrender.com"
            echo "Using constructed URL: $SERVICE_URL"
          else
            echo "Got service URL: $SERVICE_URL"
          fi
          
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "SERVICE_ID=$SERVICE_ID" >> $GITHUB_OUTPUT
          
      - name: Wait for deployment to complete
        run: |
          echo "Waiting for deployment to complete..."
          sleep 90
          
          # Check if the URL is accessible
          PREVIEW_URL="${{ steps.deploy.outputs.SERVICE_URL }}"
          echo "Checking if $PREVIEW_URL is accessible..."
          
          for i in {1..10}; do
            if curl -s --head "$PREVIEW_URL" | head -n 1 | grep -q "200 OK"; then
              echo "‚úÖ Preview site is live!"
              break
            else
              echo "‚è≥ Waiting for site to be ready... (attempt $i/10)"
              sleep 15
            fi
          done
          
      - name: Comment on PR
        if: success()
        run: |
          PREVIEW_URL="${{ steps.deploy.outputs.SERVICE_URL }}"
          SERVICE_ID="${{ steps.deploy.outputs.SERVICE_ID }}"
          
          COMMENT_BODY="üöÄ **PR Preview Deployed Successfully!**

          üì± **Preview URL:** $PREVIEW_URL
          üîß **Service ID:** \`$SERVICE_ID\`
          üåø **Branch:** \`${{ github.event.pull_request.head.ref }}\`
          
          This is a separate preview deployment that won't affect the main site.
          
          ---
          ‚ö° The preview will be automatically deleted when this PR is closed."
          
          if [ "${{ github.event.pull_request.head.repo.full_name }}" = "${{ github.repository }}" ]; then
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments \
              -d "{\"body\":$(echo "$COMMENT_BODY" | jq -Rs .)}"
          else
            echo "$COMMENT_BODY"
            echo "Preview URL: $PREVIEW_URL" >> $GITHUB_STEP_SUMMARY
          fi

  cleanup-preview:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
        
      - name: Delete Preview Service
        run: |
          SERVICE_NAME="wallgodds-pr-${{ github.event.number }}"
          
          echo "Looking for service to delete: $SERVICE_NAME"
          
          # Find the service
          SERVICES_RESPONSE=$(curl -s -X GET "https://api.render.com/v1/services" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Accept: application/json")
          
          SERVICE_ID=$(echo "$SERVICES_RESPONSE" | jq -r --arg name "$SERVICE_NAME" '.[] | select(.name == $name) | .id // empty')
          
          if [ ! -z "$SERVICE_ID" ]; then
            echo "Deleting Render service: $SERVICE_NAME (ID: $SERVICE_ID)"
            DELETE_RESPONSE=$(curl -s -X DELETE "https://api.render.com/v1/services/$SERVICE_ID" \
              -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}")
            echo "‚úÖ Preview service deleted successfully!"
          else
            echo "‚ÑπÔ∏è No preview service found to delete for PR ${{ github.event.number }}"
          fi
          
      - name: Comment cleanup completion
        run: |
          COMMENT_BODY="üßπ **Preview Environment Cleaned Up**
          
          The preview deployment for this PR has been automatically deleted.
          
          Thank you for contributing! üéâ"
          
          if [ "${{ github.event.pull_request.head.repo.full_name }}" = "${{ github.repository }}" ]; then
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments \
              -d "{\"body\":$(echo "$COMMENT_BODY" | jq -Rs .)}"
          fi
